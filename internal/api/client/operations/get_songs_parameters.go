// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetSongsParams creates a new GetSongsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetSongsParams() *GetSongsParams {
	return &GetSongsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetSongsParamsWithTimeout creates a new GetSongsParams object
// with the ability to set a timeout on a request.
func NewGetSongsParamsWithTimeout(timeout time.Duration) *GetSongsParams {
	return &GetSongsParams{
		timeout: timeout,
	}
}

// NewGetSongsParamsWithContext creates a new GetSongsParams object
// with the ability to set a context for a request.
func NewGetSongsParamsWithContext(ctx context.Context) *GetSongsParams {
	return &GetSongsParams{
		Context: ctx,
	}
}

// NewGetSongsParamsWithHTTPClient creates a new GetSongsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetSongsParamsWithHTTPClient(client *http.Client) *GetSongsParams {
	return &GetSongsParams{
		HTTPClient: client,
	}
}

/*
GetSongsParams contains all the parameters to send to the API endpoint

	for the get songs operation.

	Typically these are written to a http.Request.
*/
type GetSongsParams struct {

	/* FilterSongByGroup.

	   Filter Song By Group
	*/
	FilterSongByGroup *string

	/* FilterSongByLink.

	   Filter Song By Link
	*/
	FilterSongByLink *string

	/* FilterSongByName.

	   Filter Song By Name
	*/
	FilterSongByName *string

	/* FilterSongByReleaseDate.

	   Filter Song By Release Date
	*/
	FilterSongByReleaseDate *string

	/* FilterSongByText.

	   Filter Song By Text
	*/
	FilterSongByText *string

	/* Limit.

	   Offset Configs
	*/
	Limit int64

	/* Offset.

	   Offset Configs
	*/
	Offset int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get songs params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetSongsParams) WithDefaults() *GetSongsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get songs params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetSongsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get songs params
func (o *GetSongsParams) WithTimeout(timeout time.Duration) *GetSongsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get songs params
func (o *GetSongsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get songs params
func (o *GetSongsParams) WithContext(ctx context.Context) *GetSongsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get songs params
func (o *GetSongsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get songs params
func (o *GetSongsParams) WithHTTPClient(client *http.Client) *GetSongsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get songs params
func (o *GetSongsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFilterSongByGroup adds the filterSongByGroup to the get songs params
func (o *GetSongsParams) WithFilterSongByGroup(filterSongByGroup *string) *GetSongsParams {
	o.SetFilterSongByGroup(filterSongByGroup)
	return o
}

// SetFilterSongByGroup adds the filterSongByGroup to the get songs params
func (o *GetSongsParams) SetFilterSongByGroup(filterSongByGroup *string) {
	o.FilterSongByGroup = filterSongByGroup
}

// WithFilterSongByLink adds the filterSongByLink to the get songs params
func (o *GetSongsParams) WithFilterSongByLink(filterSongByLink *string) *GetSongsParams {
	o.SetFilterSongByLink(filterSongByLink)
	return o
}

// SetFilterSongByLink adds the filterSongByLink to the get songs params
func (o *GetSongsParams) SetFilterSongByLink(filterSongByLink *string) {
	o.FilterSongByLink = filterSongByLink
}

// WithFilterSongByName adds the filterSongByName to the get songs params
func (o *GetSongsParams) WithFilterSongByName(filterSongByName *string) *GetSongsParams {
	o.SetFilterSongByName(filterSongByName)
	return o
}

// SetFilterSongByName adds the filterSongByName to the get songs params
func (o *GetSongsParams) SetFilterSongByName(filterSongByName *string) {
	o.FilterSongByName = filterSongByName
}

// WithFilterSongByReleaseDate adds the filterSongByReleaseDate to the get songs params
func (o *GetSongsParams) WithFilterSongByReleaseDate(filterSongByReleaseDate *string) *GetSongsParams {
	o.SetFilterSongByReleaseDate(filterSongByReleaseDate)
	return o
}

// SetFilterSongByReleaseDate adds the filterSongByReleaseDate to the get songs params
func (o *GetSongsParams) SetFilterSongByReleaseDate(filterSongByReleaseDate *string) {
	o.FilterSongByReleaseDate = filterSongByReleaseDate
}

// WithFilterSongByText adds the filterSongByText to the get songs params
func (o *GetSongsParams) WithFilterSongByText(filterSongByText *string) *GetSongsParams {
	o.SetFilterSongByText(filterSongByText)
	return o
}

// SetFilterSongByText adds the filterSongByText to the get songs params
func (o *GetSongsParams) SetFilterSongByText(filterSongByText *string) {
	o.FilterSongByText = filterSongByText
}

// WithLimit adds the limit to the get songs params
func (o *GetSongsParams) WithLimit(limit int64) *GetSongsParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get songs params
func (o *GetSongsParams) SetLimit(limit int64) {
	o.Limit = limit
}

// WithOffset adds the offset to the get songs params
func (o *GetSongsParams) WithOffset(offset int64) *GetSongsParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the get songs params
func (o *GetSongsParams) SetOffset(offset int64) {
	o.Offset = offset
}

// WriteToRequest writes these params to a swagger request
func (o *GetSongsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.FilterSongByGroup != nil {

		// query param FilterSongByGroup
		var qrFilterSongByGroup string

		if o.FilterSongByGroup != nil {
			qrFilterSongByGroup = *o.FilterSongByGroup
		}
		qFilterSongByGroup := qrFilterSongByGroup
		if qFilterSongByGroup != "" {

			if err := r.SetQueryParam("FilterSongByGroup", qFilterSongByGroup); err != nil {
				return err
			}
		}
	}

	if o.FilterSongByLink != nil {

		// query param FilterSongByLink
		var qrFilterSongByLink string

		if o.FilterSongByLink != nil {
			qrFilterSongByLink = *o.FilterSongByLink
		}
		qFilterSongByLink := qrFilterSongByLink
		if qFilterSongByLink != "" {

			if err := r.SetQueryParam("FilterSongByLink", qFilterSongByLink); err != nil {
				return err
			}
		}
	}

	if o.FilterSongByName != nil {

		// query param FilterSongByName
		var qrFilterSongByName string

		if o.FilterSongByName != nil {
			qrFilterSongByName = *o.FilterSongByName
		}
		qFilterSongByName := qrFilterSongByName
		if qFilterSongByName != "" {

			if err := r.SetQueryParam("FilterSongByName", qFilterSongByName); err != nil {
				return err
			}
		}
	}

	if o.FilterSongByReleaseDate != nil {

		// query param FilterSongByReleaseDate
		var qrFilterSongByReleaseDate string

		if o.FilterSongByReleaseDate != nil {
			qrFilterSongByReleaseDate = *o.FilterSongByReleaseDate
		}
		qFilterSongByReleaseDate := qrFilterSongByReleaseDate
		if qFilterSongByReleaseDate != "" {

			if err := r.SetQueryParam("FilterSongByReleaseDate", qFilterSongByReleaseDate); err != nil {
				return err
			}
		}
	}

	if o.FilterSongByText != nil {

		// query param FilterSongByText
		var qrFilterSongByText string

		if o.FilterSongByText != nil {
			qrFilterSongByText = *o.FilterSongByText
		}
		qFilterSongByText := qrFilterSongByText
		if qFilterSongByText != "" {

			if err := r.SetQueryParam("FilterSongByText", qFilterSongByText); err != nil {
				return err
			}
		}
	}

	// query param limit
	qrLimit := o.Limit
	qLimit := swag.FormatInt64(qrLimit)
	if qLimit != "" {

		if err := r.SetQueryParam("limit", qLimit); err != nil {
			return err
		}
	}

	// query param offset
	qrOffset := o.Offset
	qOffset := swag.FormatInt64(qrOffset)
	if qOffset != "" {

		if err := r.SetQueryParam("offset", qOffset); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
