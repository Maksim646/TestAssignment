// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	models "github.com/Maksim646/TestAssignment/internal/api/definition"
)

// UpdateSongReader is a Reader for the UpdateSong structure.
type UpdateSongReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateSongReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateSongOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateSongBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateSongInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PATCH /song/{id}] UpdateSong", response, response.Code())
	}
}

// NewUpdateSongOK creates a UpdateSongOK with default headers values
func NewUpdateSongOK() *UpdateSongOK {
	return &UpdateSongOK{}
}

/*
UpdateSongOK describes a response with status code 200, with default header values.

Update Song Response
*/
type UpdateSongOK struct {
	Payload *models.Error
}

// IsSuccess returns true when this update song o k response has a 2xx status code
func (o *UpdateSongOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update song o k response has a 3xx status code
func (o *UpdateSongOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update song o k response has a 4xx status code
func (o *UpdateSongOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update song o k response has a 5xx status code
func (o *UpdateSongOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update song o k response a status code equal to that given
func (o *UpdateSongOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update song o k response
func (o *UpdateSongOK) Code() int {
	return 200
}

func (o *UpdateSongOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /song/{id}][%d] updateSongOK %s", 200, payload)
}

func (o *UpdateSongOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /song/{id}][%d] updateSongOK %s", 200, payload)
}

func (o *UpdateSongOK) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateSongOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateSongBadRequest creates a UpdateSongBadRequest with default headers values
func NewUpdateSongBadRequest() *UpdateSongBadRequest {
	return &UpdateSongBadRequest{}
}

/*
UpdateSongBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type UpdateSongBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this update song bad request response has a 2xx status code
func (o *UpdateSongBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update song bad request response has a 3xx status code
func (o *UpdateSongBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update song bad request response has a 4xx status code
func (o *UpdateSongBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update song bad request response has a 5xx status code
func (o *UpdateSongBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update song bad request response a status code equal to that given
func (o *UpdateSongBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update song bad request response
func (o *UpdateSongBadRequest) Code() int {
	return 400
}

func (o *UpdateSongBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /song/{id}][%d] updateSongBadRequest %s", 400, payload)
}

func (o *UpdateSongBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /song/{id}][%d] updateSongBadRequest %s", 400, payload)
}

func (o *UpdateSongBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateSongBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateSongInternalServerError creates a UpdateSongInternalServerError with default headers values
func NewUpdateSongInternalServerError() *UpdateSongInternalServerError {
	return &UpdateSongInternalServerError{}
}

/*
UpdateSongInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type UpdateSongInternalServerError struct {
	Payload *models.Error
}

// IsSuccess returns true when this update song internal server error response has a 2xx status code
func (o *UpdateSongInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update song internal server error response has a 3xx status code
func (o *UpdateSongInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update song internal server error response has a 4xx status code
func (o *UpdateSongInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update song internal server error response has a 5xx status code
func (o *UpdateSongInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update song internal server error response a status code equal to that given
func (o *UpdateSongInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update song internal server error response
func (o *UpdateSongInternalServerError) Code() int {
	return 500
}

func (o *UpdateSongInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /song/{id}][%d] updateSongInternalServerError %s", 500, payload)
}

func (o *UpdateSongInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /song/{id}][%d] updateSongInternalServerError %s", 500, payload)
}

func (o *UpdateSongInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateSongInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
