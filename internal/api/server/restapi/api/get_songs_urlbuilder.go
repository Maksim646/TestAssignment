// Code generated by go-swagger; DO NOT EDIT.

package api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"errors"
	"net/url"
	golangswaggerpaths "path"

	"github.com/go-openapi/swag"
)

// GetSongsURL generates an URL for the get songs operation
type GetSongsURL struct {
	FilterSongByGroup       *string
	FilterSongByLink        *string
	FilterSongByName        *string
	FilterSongByReleaseDate *string
	FilterSongByText        *string
	Limit                   int64
	Offset                  int64

	_basePath string
	// avoid unkeyed usage
	_ struct{}
}

// WithBasePath sets the base path for this url builder, only required when it's different from the
// base path specified in the swagger spec.
// When the value of the base path is an empty string
func (o *GetSongsURL) WithBasePath(bp string) *GetSongsURL {
	o.SetBasePath(bp)
	return o
}

// SetBasePath sets the base path for this url builder, only required when it's different from the
// base path specified in the swagger spec.
// When the value of the base path is an empty string
func (o *GetSongsURL) SetBasePath(bp string) {
	o._basePath = bp
}

// Build a url path and query string
func (o *GetSongsURL) Build() (*url.URL, error) {
	var _result url.URL

	var _path = "/songs"

	_basePath := o._basePath
	_result.Path = golangswaggerpaths.Join(_basePath, _path)

	qs := make(url.Values)

	var filterSongByGroupQ string
	if o.FilterSongByGroup != nil {
		filterSongByGroupQ = *o.FilterSongByGroup
	}
	if filterSongByGroupQ != "" {
		qs.Set("FilterSongByGroup", filterSongByGroupQ)
	}

	var filterSongByLinkQ string
	if o.FilterSongByLink != nil {
		filterSongByLinkQ = *o.FilterSongByLink
	}
	if filterSongByLinkQ != "" {
		qs.Set("FilterSongByLink", filterSongByLinkQ)
	}

	var filterSongByNameQ string
	if o.FilterSongByName != nil {
		filterSongByNameQ = *o.FilterSongByName
	}
	if filterSongByNameQ != "" {
		qs.Set("FilterSongByName", filterSongByNameQ)
	}

	var filterSongByReleaseDateQ string
	if o.FilterSongByReleaseDate != nil {
		filterSongByReleaseDateQ = *o.FilterSongByReleaseDate
	}
	if filterSongByReleaseDateQ != "" {
		qs.Set("FilterSongByReleaseDate", filterSongByReleaseDateQ)
	}

	var filterSongByTextQ string
	if o.FilterSongByText != nil {
		filterSongByTextQ = *o.FilterSongByText
	}
	if filterSongByTextQ != "" {
		qs.Set("FilterSongByText", filterSongByTextQ)
	}

	limitQ := swag.FormatInt64(o.Limit)
	if limitQ != "" {
		qs.Set("limit", limitQ)
	}

	offsetQ := swag.FormatInt64(o.Offset)
	if offsetQ != "" {
		qs.Set("offset", offsetQ)
	}

	_result.RawQuery = qs.Encode()

	return &_result, nil
}

// Must is a helper function to panic when the url builder returns an error
func (o *GetSongsURL) Must(u *url.URL, err error) *url.URL {
	if err != nil {
		panic(err)
	}
	if u == nil {
		panic("url can't be nil")
	}
	return u
}

// String returns the string representation of the path with query string
func (o *GetSongsURL) String() string {
	return o.Must(o.Build()).String()
}

// BuildFull builds a full url with scheme, host, path and query string
func (o *GetSongsURL) BuildFull(scheme, host string) (*url.URL, error) {
	if scheme == "" {
		return nil, errors.New("scheme is required for a full url on GetSongsURL")
	}
	if host == "" {
		return nil, errors.New("host is required for a full url on GetSongsURL")
	}

	base, err := o.Build()
	if err != nil {
		return nil, err
	}

	base.Scheme = scheme
	base.Host = host
	return base, nil
}

// StringFull returns the string representation of a complete url
func (o *GetSongsURL) StringFull(scheme, host string) string {
	return o.Must(o.BuildFull(scheme, host)).String()
}
